#!/usr/bin/env python
import json
import time
import random
import paho.mqtt.client as mqtt

# Constants
TIME_INTERVAL = 30  # 3 seconds

# Configuration for MQTT
# Credentials redacted for public posting
prod = {
    "username": "",
    "password": "",
    "clientId": "",
    "broker": "mqtt.zafron.dev"
}

# Helper functions
def round_number(number, precision):
    return round(number, precision)

def get_random():
    return round_number(random.random() * 100, 5)

def get_time():
    return time.time()

# MQTT Callbacks
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe(prod['clientId'] + "/data/json")

def on_message(client, userdata, msg):
    print(msg.topic + " " + str(msg.payload))

# MQTT Client setup
client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.username_pw_set(prod['username'], prod['password'])
client.connect(prod['broker'], 1883, 60)

# Publisher function
def publisher():
    below10 = get_random() / 10
    motion = 1 if below10 < 5 else 0
    json_payload = [
        {"channel": 100, "type": "rssi", "unit": "dbm", "value": get_random(), "name": "RSSI"},
        {"channel": 101, "type": "snr", "unit": "db", "value": get_random(), "name": "SNR"},
        {"channel": 6, "type": "co2", "unit": "ppm", "value": get_random(), "name": "CO2"},
        {"channel": 107, "type": "voltage", "unit": "v", "value": below10, "name": "VDD"}
    ]

    json_string = json.dumps(json_payload)
    client.publish(prod['clientId'] + '/data/json', json_string)
    print('Data sent at %s' % time.ctime())

# Main execution
if __name__ == "__main__":
    client.loop_start()
    try:
        while True:
            publisher()
            time.sleep(TIME_INTERVAL)
    except KeyboardInterrupt:
        client.loop_stop()
        client.disconnect()


